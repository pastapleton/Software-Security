// This is a generated source file for Chilkat version 9.4.1.34
#ifndef _C_CkEmail_W_H
#define _C_CkEmail_W_H
#include "chilkatDefs.h"

#include "Chilkat_C.h"

HCkEmailW CkEmailW_Create(void);
HCkEmailW CkEmailW_Create2(BOOL bForDso);
void CkEmailW_Dispose(HCkEmailW handle);
void CkEmailW_getBody(HCkEmailW cHandle, HCkStringW retval);
void CkEmailW_putBody(HCkEmailW cHandle, const wchar_t *newVal);
void CkEmailW_getBounceAddress(HCkEmailW cHandle, HCkStringW retval);
void CkEmailW_putBounceAddress(HCkEmailW cHandle, const wchar_t *newVal);
void CkEmailW_getCharset(HCkEmailW cHandle, HCkStringW retval);
void CkEmailW_putCharset(HCkEmailW cHandle, const wchar_t *newVal);
void CkEmailW_getDebugLogFilePath(HCkEmailW cHandle, HCkStringW retval);
void CkEmailW_putDebugLogFilePath(HCkEmailW cHandle, const wchar_t *newVal);
BOOL CkEmailW_getDecrypted(HCkEmailW cHandle);
void CkEmailW_getEmailDate(HCkEmailW cHandle, SYSTEMTIME *retval);
void CkEmailW_putEmailDate(HCkEmailW cHandle, SYSTEMTIME *newVal);
void CkEmailW_getEmailDateStr(HCkEmailW cHandle, HCkStringW retval);
void CkEmailW_putEmailDateStr(HCkEmailW cHandle, const wchar_t *newVal);
void CkEmailW_getEncryptedBy(HCkEmailW cHandle, HCkStringW retval);
void CkEmailW_getFileDistList(HCkEmailW cHandle, HCkStringW retval);
void CkEmailW_putFileDistList(HCkEmailW cHandle, const wchar_t *newVal);
void CkEmailW_getFrom(HCkEmailW cHandle, HCkStringW retval);
void CkEmailW_putFrom(HCkEmailW cHandle, const wchar_t *newVal);
void CkEmailW_getFromAddress(HCkEmailW cHandle, HCkStringW retval);
void CkEmailW_putFromAddress(HCkEmailW cHandle, const wchar_t *newVal);
void CkEmailW_getFromName(HCkEmailW cHandle, HCkStringW retval);
void CkEmailW_putFromName(HCkEmailW cHandle, const wchar_t *newVal);
void CkEmailW_getHeader(HCkEmailW cHandle, HCkStringW retval);
void CkEmailW_getLanguage(HCkEmailW cHandle, HCkStringW retval);
void CkEmailW_getLastErrorHtml(HCkEmailW cHandle, HCkStringW retval);
void CkEmailW_getLastErrorText(HCkEmailW cHandle, HCkStringW retval);
void CkEmailW_getLastErrorXml(HCkEmailW cHandle, HCkStringW retval);
void CkEmailW_getLocalDate(HCkEmailW cHandle, SYSTEMTIME *retval);
void CkEmailW_putLocalDate(HCkEmailW cHandle, SYSTEMTIME *newVal);
void CkEmailW_getLocalDateStr(HCkEmailW cHandle, HCkStringW retval);
void CkEmailW_putLocalDateStr(HCkEmailW cHandle, const wchar_t *newVal);
void CkEmailW_getMailer(HCkEmailW cHandle, HCkStringW retval);
void CkEmailW_putMailer(HCkEmailW cHandle, const wchar_t *newVal);
int CkEmailW_getNumAlternatives(HCkEmailW cHandle);
int CkEmailW_getNumAttachedMessages(HCkEmailW cHandle);
int CkEmailW_getNumAttachments(HCkEmailW cHandle);
int CkEmailW_getNumBcc(HCkEmailW cHandle);
int CkEmailW_getNumCC(HCkEmailW cHandle);
int CkEmailW_getNumDaysOld(HCkEmailW cHandle);
int CkEmailW_getNumHeaderFields(HCkEmailW cHandle);
int CkEmailW_getNumRelatedItems(HCkEmailW cHandle);
int CkEmailW_getNumReplacePatterns(HCkEmailW cHandle);
int CkEmailW_getNumReports(HCkEmailW cHandle);
int CkEmailW_getNumTo(HCkEmailW cHandle);
BOOL CkEmailW_getOverwriteExisting(HCkEmailW cHandle);
void CkEmailW_putOverwriteExisting(HCkEmailW cHandle, BOOL newVal);
void CkEmailW_getPkcs7CryptAlg(HCkEmailW cHandle, HCkStringW retval);
void CkEmailW_putPkcs7CryptAlg(HCkEmailW cHandle, const wchar_t *newVal);
int CkEmailW_getPkcs7KeyLength(HCkEmailW cHandle);
void CkEmailW_putPkcs7KeyLength(HCkEmailW cHandle, int newVal);
void CkEmailW_getPreferredCharset(HCkEmailW cHandle, HCkStringW retval);
void CkEmailW_putPreferredCharset(HCkEmailW cHandle, const wchar_t *newVal);
BOOL CkEmailW_getPrependHeaders(HCkEmailW cHandle);
void CkEmailW_putPrependHeaders(HCkEmailW cHandle, BOOL newVal);
BOOL CkEmailW_getReceivedEncrypted(HCkEmailW cHandle);
BOOL CkEmailW_getReceivedSigned(HCkEmailW cHandle);
void CkEmailW_getReplyTo(HCkEmailW cHandle, HCkStringW retval);
void CkEmailW_putReplyTo(HCkEmailW cHandle, const wchar_t *newVal);
BOOL CkEmailW_getReturnReceipt(HCkEmailW cHandle);
void CkEmailW_putReturnReceipt(HCkEmailW cHandle, BOOL newVal);
BOOL CkEmailW_getSendEncrypted(HCkEmailW cHandle);
void CkEmailW_putSendEncrypted(HCkEmailW cHandle, BOOL newVal);
BOOL CkEmailW_getSendSigned(HCkEmailW cHandle);
void CkEmailW_putSendSigned(HCkEmailW cHandle, BOOL newVal);
BOOL CkEmailW_getSignaturesValid(HCkEmailW cHandle);
void CkEmailW_getSignedBy(HCkEmailW cHandle, HCkStringW retval);
void CkEmailW_getSigningHashAlg(HCkEmailW cHandle, HCkStringW retval);
void CkEmailW_putSigningHashAlg(HCkEmailW cHandle, const wchar_t *newVal);
int CkEmailW_getSize(HCkEmailW cHandle);
void CkEmailW_getSubject(HCkEmailW cHandle, HCkStringW retval);
void CkEmailW_putSubject(HCkEmailW cHandle, const wchar_t *newVal);
void CkEmailW_getUidl(HCkEmailW cHandle, HCkStringW retval);
BOOL CkEmailW_getUnpackUseRelPaths(HCkEmailW cHandle);
void CkEmailW_putUnpackUseRelPaths(HCkEmailW cHandle, BOOL newVal);
BOOL CkEmailW_getVerboseLogging(HCkEmailW cHandle);
void CkEmailW_putVerboseLogging(HCkEmailW cHandle, BOOL newVal);
void CkEmailW_getVersion(HCkEmailW cHandle, HCkStringW retval);
void CkEmailW_AddAttachmentHeader(HCkEmailW cHandle, int index, const wchar_t *fieldName, const wchar_t *fieldValue);
BOOL CkEmailW_AddBcc(HCkEmailW cHandle, const wchar_t *friendlyName, const wchar_t *emailAddress);
BOOL CkEmailW_AddCC(HCkEmailW cHandle, const wchar_t *friendlyName, const wchar_t *emailAddress);
BOOL CkEmailW_AddDataAttachment(HCkEmailW cHandle, const wchar_t *fileName, const unsigned char *pByteData, unsigned long szByteData);
BOOL CkEmailW_AddDataAttachment2(HCkEmailW cHandle, const wchar_t *fileName, HCkByteDataW content, const wchar_t *contentType);
BOOL CkEmailW_AddEncryptCert(HCkEmailW cHandle, HCkCertW cert);
BOOL CkEmailW_AddFileAttachment(HCkEmailW cHandle, const wchar_t *path, HCkStringW outStrContentType);
BOOL CkEmailW_AddFileAttachment2(HCkEmailW cHandle, const wchar_t *path, const wchar_t *contentType);
void CkEmailW_AddHeaderField(HCkEmailW cHandle, const wchar_t *fieldName, const wchar_t *fieldValue);
void CkEmailW_AddHeaderField2(HCkEmailW cHandle, const wchar_t *fieldName, const wchar_t *fieldValue);
BOOL CkEmailW_AddHtmlAlternativeBody(HCkEmailW cHandle, const wchar_t *body);
BOOL CkEmailW_AddMultipleBcc(HCkEmailW cHandle, const wchar_t *commaSeparatedAddresses);
BOOL CkEmailW_AddMultipleCC(HCkEmailW cHandle, const wchar_t *commaSeparatedAddresses);
BOOL CkEmailW_AddMultipleTo(HCkEmailW cHandle, const wchar_t *commaSeparatedAddresses);
BOOL CkEmailW_AddPfxSourceData(HCkEmailW cHandle, HCkByteDataW pfxData, const wchar_t *password);
BOOL CkEmailW_AddPfxSourceFile(HCkEmailW cHandle, const wchar_t *pfxFilePath, const wchar_t *password);
BOOL CkEmailW_AddPlainTextAlternativeBody(HCkEmailW cHandle, const wchar_t *body);
BOOL CkEmailW_AddRelatedData(HCkEmailW cHandle, const wchar_t *fileName, HCkByteDataW inData, HCkStringW outStr);
void CkEmailW_AddRelatedData2(HCkEmailW cHandle, HCkByteDataW inData, const wchar_t *fileNameInHtml);
#if !defined(CHILKAT_MONO)
void CkEmailW_AddRelatedData2P(HCkEmailW cHandle, const unsigned char *pByteData, unsigned long szByteData, const wchar_t *fileNameInHtml);
#endif
#if !defined(CHILKAT_MONO)
BOOL CkEmailW_AddRelatedDataP(HCkEmailW cHandle, const wchar_t *nameInHtml, const unsigned char *pByteData, unsigned long szByteData, HCkStringW outStrContentId);
#endif
BOOL CkEmailW_AddRelatedFile(HCkEmailW cHandle, const wchar_t *path, HCkStringW outStrContentID);
BOOL CkEmailW_AddRelatedFile2(HCkEmailW cHandle, const wchar_t *fileNameOnDisk, const wchar_t *filenameInHtml);
void CkEmailW_AddRelatedHeader(HCkEmailW cHandle, int index, const wchar_t *fieldName, const wchar_t *fieldValue);
BOOL CkEmailW_AddRelatedString(HCkEmailW cHandle, const wchar_t *nameInHtml, const wchar_t *str, const wchar_t *charset, HCkStringW outCid);
void CkEmailW_AddRelatedString2(HCkEmailW cHandle, const wchar_t *str, const wchar_t *charset, const wchar_t *filenameInHtml);
BOOL CkEmailW_AddStringAttachment(HCkEmailW cHandle, const wchar_t *fileName, const wchar_t *str);
BOOL CkEmailW_AddStringAttachment2(HCkEmailW cHandle, const wchar_t *fileName, const wchar_t *str, const wchar_t *charset);
BOOL CkEmailW_AddTo(HCkEmailW cHandle, const wchar_t *friendlyName, const wchar_t *emailAddress);
BOOL CkEmailW_AddiCalendarAlternativeBody(HCkEmailW cHandle, const wchar_t *body, const wchar_t *methodName);
BOOL CkEmailW_AesDecrypt(HCkEmailW cHandle, const wchar_t *password);
BOOL CkEmailW_AesEncrypt(HCkEmailW cHandle, const wchar_t *password);
void CkEmailW_AppendToBody(HCkEmailW cHandle, const wchar_t *str);
BOOL CkEmailW_AspUnpack(HCkEmailW cHandle, const wchar_t *prefix, const wchar_t *saveDir, const wchar_t *urlPath, BOOL cleanFiles);
BOOL CkEmailW_AspUnpack2(HCkEmailW cHandle, const wchar_t *prefix, const wchar_t *saveDir, const wchar_t *urlPath, BOOL cleanFiles, HCkByteDataW outHtml);
BOOL CkEmailW_AttachMessage(HCkEmailW cHandle, HCkByteDataW mimeBytes);
BOOL CkEmailW_BEncodeBytes(HCkEmailW cHandle, const unsigned char *pByteData, unsigned long szByteData, const wchar_t *charset, HCkStringW outEncodedStr);
BOOL CkEmailW_BEncodeString(HCkEmailW cHandle, const wchar_t *str, const wchar_t *charset, HCkStringW outEncodedStr);
void CkEmailW_ClearBcc(HCkEmailW cHandle);
void CkEmailW_ClearCC(HCkEmailW cHandle);
void CkEmailW_ClearEncryptCerts(HCkEmailW cHandle);
void CkEmailW_ClearTo(HCkEmailW cHandle);
HCkEmailW CkEmailW_Clone(HCkEmailW cHandle);
BOOL CkEmailW_ComputeGlobalKey(HCkEmailW cHandle, const wchar_t *encoding, BOOL bFold, HCkStringW outStr);
HCkEmailW CkEmailW_CreateDsn(HCkEmailW cHandle, const wchar_t *explanation, const wchar_t *xmlDeliveryStatus, BOOL bHeaderOnly);
HCkEmailW CkEmailW_CreateForward(HCkEmailW cHandle);
HCkEmailW CkEmailW_CreateMdn(HCkEmailW cHandle, const wchar_t *explanation, const wchar_t *xmlMdnFields, BOOL bHeaderOnly);
HCkEmailW CkEmailW_CreateReply(HCkEmailW cHandle);
BOOL CkEmailW_CreateTempMht(HCkEmailW cHandle, const wchar_t *inPath, HCkStringW outPath);
void CkEmailW_DropAttachments(HCkEmailW cHandle);
void CkEmailW_DropRelatedItem(HCkEmailW cHandle, int index);
void CkEmailW_DropRelatedItems(HCkEmailW cHandle);
BOOL CkEmailW_DropSingleAttachment(HCkEmailW cHandle, int index);
HCkCertW CkEmailW_FindIssuer(HCkEmailW cHandle, HCkCertW cert);
BOOL CkEmailW_GenerateFilename(HCkEmailW cHandle, HCkStringW outStrFilename);
BOOL CkEmailW_GetAltHeaderField(HCkEmailW cHandle, int index, const wchar_t *fieldName, HCkStringW outStr);
BOOL CkEmailW_GetAlternativeBody(HCkEmailW cHandle, int index, HCkStringW outStrBody);
BOOL CkEmailW_GetAlternativeBodyByContentType(HCkEmailW cHandle, const wchar_t *contentType, HCkStringW outStr);
BOOL CkEmailW_GetAlternativeContentType(HCkEmailW cHandle, int index, HCkStringW outStrContentType);
HCkEmailW CkEmailW_GetAttachedMessage(HCkEmailW cHandle, int index);
BOOL CkEmailW_GetAttachedMessageFilename(HCkEmailW cHandle, int index, HCkStringW outStr);
BOOL CkEmailW_GetAttachmentContentID(HCkEmailW cHandle, int index, HCkStringW outStrContentID);
BOOL CkEmailW_GetAttachmentContentType(HCkEmailW cHandle, int index, HCkStringW outStrContentType);
BOOL CkEmailW_GetAttachmentData(HCkEmailW cHandle, int index, HCkByteDataW outData);
BOOL CkEmailW_GetAttachmentFilename(HCkEmailW cHandle, int index, HCkStringW outStrFilename);
BOOL CkEmailW_GetAttachmentHeader(HCkEmailW cHandle, int index, const wchar_t *fieldName, HCkStringW outFieldValue);
int CkEmailW_GetAttachmentSize(HCkEmailW cHandle, int index);
BOOL CkEmailW_GetAttachmentString(HCkEmailW cHandle, int index, const wchar_t *charset, HCkStringW outStr);
BOOL CkEmailW_GetAttachmentStringCrLf(HCkEmailW cHandle, int index, const wchar_t *charset, HCkStringW outStrData);
BOOL CkEmailW_GetBcc(HCkEmailW cHandle, int index, HCkStringW outStr);
BOOL CkEmailW_GetBccAddr(HCkEmailW cHandle, int index, HCkStringW outStr);
BOOL CkEmailW_GetBccName(HCkEmailW cHandle, int index, HCkStringW outStr);
BOOL CkEmailW_GetCC(HCkEmailW cHandle, int index, HCkStringW outStr);
BOOL CkEmailW_GetCcAddr(HCkEmailW cHandle, int index, HCkStringW outStr);
BOOL CkEmailW_GetCcName(HCkEmailW cHandle, int index, HCkStringW outStr);
BOOL CkEmailW_GetDeliveryStatusInfo(HCkEmailW cHandle, const wchar_t *fieldName, HCkStringW outFieldValue);
HCkStringArrayW CkEmailW_GetDsnFinalRecipients(HCkEmailW cHandle);
HCkDateTimeW CkEmailW_GetDt(HCkEmailW cHandle);
HCkCertW CkEmailW_GetEncryptCert(HCkEmailW cHandle);
HCkCertW CkEmailW_GetEncryptedByCert(HCkEmailW cHandle);
BOOL CkEmailW_GetFileContent(HCkEmailW cHandle, const wchar_t *path, HCkByteDataW outData);
BOOL CkEmailW_GetHeaderField(HCkEmailW cHandle, const wchar_t *fieldName, HCkStringW outStrFieldData);
BOOL CkEmailW_GetHeaderFieldName(HCkEmailW cHandle, int index, HCkStringW outStrFieldName);
BOOL CkEmailW_GetHeaderFieldValue(HCkEmailW cHandle, int index, HCkStringW outStrFieldValue);
BOOL CkEmailW_GetHtmlBody(HCkEmailW cHandle, HCkStringW outStrBody);
int CkEmailW_GetImapUid(HCkEmailW cHandle);
void CkEmailW_GetLinkedDomains(HCkEmailW cHandle, HCkStringArrayW sa);
BOOL CkEmailW_GetMbHeaderField(HCkEmailW cHandle, const wchar_t *fieldName, HCkByteDataW outData);
BOOL CkEmailW_GetMbHeaderField2(HCkEmailW cHandle, const wchar_t *charset, const wchar_t *fieldName, HCkByteDataW outData);
BOOL CkEmailW_GetMbHtmlBody(HCkEmailW cHandle, const wchar_t *charset, HCkByteDataW outData);
BOOL CkEmailW_GetMbPlainTextBody(HCkEmailW cHandle, const wchar_t *charset, HCkByteDataW outData);
BOOL CkEmailW_GetMime(HCkEmailW cHandle, HCkStringW outStrMime);
BOOL CkEmailW_GetMimeBinary(HCkEmailW cHandle, HCkByteDataW outBytes);
HCkMimeW CkEmailW_GetMimeObject(HCkEmailW cHandle);
BOOL CkEmailW_GetPlainTextBody(HCkEmailW cHandle, HCkStringW outStrBody);
BOOL CkEmailW_GetRelatedContentID(HCkEmailW cHandle, int index, HCkStringW outStrContentID);
BOOL CkEmailW_GetRelatedContentLocation(HCkEmailW cHandle, int index, HCkStringW outStr);
BOOL CkEmailW_GetRelatedContentType(HCkEmailW cHandle, int index, HCkStringW outStrContentType);
BOOL CkEmailW_GetRelatedData(HCkEmailW cHandle, int index, HCkByteDataW outBuffer);
BOOL CkEmailW_GetRelatedFilename(HCkEmailW cHandle, int index, HCkStringW outStrFilename);
BOOL CkEmailW_GetRelatedString(HCkEmailW cHandle, int index, const wchar_t *charset, HCkStringW outStrData);
BOOL CkEmailW_GetRelatedStringCrLf(HCkEmailW cHandle, int index, const wchar_t *charset, HCkStringW outStr);
BOOL CkEmailW_GetReplacePattern(HCkEmailW cHandle, int index, HCkStringW outStrPattern);
BOOL CkEmailW_GetReplaceString(HCkEmailW cHandle, int index, HCkStringW outStr);
BOOL CkEmailW_GetReplaceString2(HCkEmailW cHandle, const wchar_t *pattern, HCkStringW outStr);
BOOL CkEmailW_GetReport(HCkEmailW cHandle, int index, HCkStringW outStr);
HCkCertW CkEmailW_GetSignedByCert(HCkEmailW cHandle);
HCkCertW CkEmailW_GetSigningCert(HCkEmailW cHandle);
BOOL CkEmailW_GetTo(HCkEmailW cHandle, int index, HCkStringW outStr);
BOOL CkEmailW_GetToAddr(HCkEmailW cHandle, int index, HCkStringW outStr);
BOOL CkEmailW_GetToName(HCkEmailW cHandle, int index, HCkStringW outStr);
BOOL CkEmailW_GetXml(HCkEmailW cHandle, HCkStringW outStrXml);
BOOL CkEmailW_HasHeaderMatching(HCkEmailW cHandle, const wchar_t *fieldName, const wchar_t *valuePattern, BOOL caseInsensitive);
BOOL CkEmailW_HasHtmlBody(HCkEmailW cHandle);
BOOL CkEmailW_HasPlainTextBody(HCkEmailW cHandle);
BOOL CkEmailW_IsMultipartReport(HCkEmailW cHandle);
BOOL CkEmailW_LoadEml(HCkEmailW cHandle, const wchar_t *mimePath);
BOOL CkEmailW_LoadXml(HCkEmailW cHandle, const wchar_t *xmlPath);
BOOL CkEmailW_LoadXmlString(HCkEmailW cHandle, const wchar_t *xmlStr);
BOOL CkEmailW_QEncodeBytes(HCkEmailW cHandle, const unsigned char *pByteData, unsigned long szByteData, const wchar_t *charset, HCkStringW outEncodedStr);
BOOL CkEmailW_QEncodeString(HCkEmailW cHandle, const wchar_t *str, const wchar_t *charset, HCkStringW outEncodedStr);
void CkEmailW_RemoveAttachedMessage(HCkEmailW cHandle, int index);
void CkEmailW_RemoveAttachedMessages(HCkEmailW cHandle);
void CkEmailW_RemoveAttachmentPaths(HCkEmailW cHandle);
void CkEmailW_RemoveHeaderField(HCkEmailW cHandle, const wchar_t *fieldName);
void CkEmailW_RemoveHtmlAlternative(HCkEmailW cHandle);
void CkEmailW_RemovePlainTextAlternative(HCkEmailW cHandle);
BOOL CkEmailW_SaveAllAttachments(HCkEmailW cHandle, const wchar_t *directory);
BOOL CkEmailW_SaveAttachedFile(HCkEmailW cHandle, int index, const wchar_t *directory);
BOOL CkEmailW_SaveEml(HCkEmailW cHandle, const wchar_t *path);
BOOL CkEmailW_SaveLastError(HCkEmailW cHandle, const wchar_t *path);
BOOL CkEmailW_SaveRelatedItem(HCkEmailW cHandle, int index, const wchar_t *directory);
BOOL CkEmailW_SaveXml(HCkEmailW cHandle, const wchar_t *path);
BOOL CkEmailW_SetAttachmentCharset(HCkEmailW cHandle, int index, const wchar_t *charset);
BOOL CkEmailW_SetAttachmentDisposition(HCkEmailW cHandle, int index, const wchar_t *disposition);
BOOL CkEmailW_SetAttachmentFilename(HCkEmailW cHandle, int index, const wchar_t *filename);
#if defined(CK_CSP_INCLUDED)
BOOL CkEmailW_SetCSP(HCkEmailW cHandle, HCkCspW csp);
#endif
BOOL CkEmailW_SetDecryptCert2(HCkEmailW cHandle, HCkCertW cert, HCkPrivateKeyW key);
BOOL CkEmailW_SetDt(HCkEmailW cHandle, HCkDateTimeW dt);
BOOL CkEmailW_SetEncryptCert(HCkEmailW cHandle, HCkCertW cert);
BOOL CkEmailW_SetFromMimeBytes(HCkEmailW cHandle, HCkByteDataW mimeBytes);
BOOL CkEmailW_SetFromMimeBytes2(HCkEmailW cHandle, HCkByteDataW mimeBytes, const wchar_t *charset);
BOOL CkEmailW_SetFromMimeObject(HCkEmailW cHandle, HCkMimeW mime);
BOOL CkEmailW_SetFromMimeText(HCkEmailW cHandle, const wchar_t *mimeText);
BOOL CkEmailW_SetFromXmlText(HCkEmailW cHandle, const wchar_t *xmlStr);
void CkEmailW_SetHtmlBody(HCkEmailW cHandle, const wchar_t *html);
BOOL CkEmailW_SetMbHtmlBody(HCkEmailW cHandle, const wchar_t *charset, const unsigned char *pByteData, unsigned long szByteData);
BOOL CkEmailW_SetMbPlainTextBody(HCkEmailW cHandle, const wchar_t *charset, const unsigned char *pByteData, unsigned long szByteData);
BOOL CkEmailW_SetRelatedFilename(HCkEmailW cHandle, int index, const wchar_t *filename);
BOOL CkEmailW_SetReplacePattern(HCkEmailW cHandle, const wchar_t *pattern, const wchar_t *replaceString);
BOOL CkEmailW_SetSigningCert(HCkEmailW cHandle, HCkCertW cert);
BOOL CkEmailW_SetSigningCert2(HCkEmailW cHandle, HCkCertW cert, HCkPrivateKeyW key);
void CkEmailW_SetTextBody(HCkEmailW cHandle, const wchar_t *bodyText, const wchar_t *contentType);
BOOL CkEmailW_UidlEquals(HCkEmailW cHandle, HCkEmailW e);
void CkEmailW_UnSpamify(HCkEmailW cHandle);
BOOL CkEmailW_UnpackHtml(HCkEmailW cHandle, const wchar_t *unpackDir, const wchar_t *htmlFilename, const wchar_t *partsSubdir);
BOOL CkEmailW_UnzipAttachments(HCkEmailW cHandle);
BOOL CkEmailW_ZipAttachments(HCkEmailW cHandle, const wchar_t *zipFilename);
const wchar_t *CkEmailW__addFileAttachment(HCkEmailW cHandle, const wchar_t *path);
const wchar_t *CkEmailW__addRelatedData(HCkEmailW cHandle, const wchar_t *fileName, HCkByteDataW inData);
#if !defined(CHILKAT_MONO)
const wchar_t *CkEmailW__addRelatedDataP(HCkEmailW cHandle, const wchar_t *nameInHtml, const unsigned char *pByteData, unsigned long szByteData);
#endif
const wchar_t *CkEmailW__addRelatedFile(HCkEmailW cHandle, const wchar_t *path);
const wchar_t *CkEmailW__addRelatedString(HCkEmailW cHandle, const wchar_t *nameInHtml, const wchar_t *str, const wchar_t *charset);
const wchar_t *CkEmailW__altHeaderField(HCkEmailW cHandle, int index, const wchar_t *fieldName);
const wchar_t *CkEmailW__alternativeBody(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__alternativeBodyByContentType(HCkEmailW cHandle, const wchar_t *contentType);
const wchar_t *CkEmailW__alternativeContentType(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__attachedMessageFilename(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__attachmentContentID(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__attachmentContentType(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__attachmentFilename(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__attachmentHeader(HCkEmailW cHandle, int index, const wchar_t *fieldName);
const wchar_t *CkEmailW__attachmentString(HCkEmailW cHandle, int index, const wchar_t *charset);
const wchar_t *CkEmailW__attachmentStringCrLf(HCkEmailW cHandle, int index, const wchar_t *charset);
const wchar_t *CkEmailW__bEncodeBytes(HCkEmailW cHandle, const unsigned char *pByteData, unsigned long szByteData, const wchar_t *charset);
const wchar_t *CkEmailW__bEncodeString(HCkEmailW cHandle, const wchar_t *str, const wchar_t *charset);
const wchar_t *CkEmailW__bcc(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__bccAddr(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__bccName(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__body(HCkEmailW cHandle);
const wchar_t *CkEmailW__bounceAddress(HCkEmailW cHandle);
const wchar_t *CkEmailW__cC(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__ccAddr(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__ccName(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__charset(HCkEmailW cHandle);
const wchar_t *CkEmailW__ck_from(HCkEmailW cHandle);
const wchar_t *CkEmailW__computeGlobalKey(HCkEmailW cHandle, const wchar_t *encoding, BOOL bFold);
const wchar_t *CkEmailW__createTempMht(HCkEmailW cHandle, const wchar_t *inPath);
const wchar_t *CkEmailW__debugLogFilePath(HCkEmailW cHandle);
const wchar_t *CkEmailW__deliveryStatusInfo(HCkEmailW cHandle, const wchar_t *fieldName);
const wchar_t *CkEmailW__emailDateStr(HCkEmailW cHandle);
const wchar_t *CkEmailW__encryptedBy(HCkEmailW cHandle);
const wchar_t *CkEmailW__fileDistList(HCkEmailW cHandle);
const wchar_t *CkEmailW__fromAddress(HCkEmailW cHandle);
const wchar_t *CkEmailW__fromName(HCkEmailW cHandle);
const wchar_t *CkEmailW__generateFilename(HCkEmailW cHandle);
const wchar_t *CkEmailW__getAltHeaderField(HCkEmailW cHandle, int index, const wchar_t *fieldName);
const wchar_t *CkEmailW__getAlternativeBody(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__getAlternativeBodyByContentType(HCkEmailW cHandle, const wchar_t *contentType);
const wchar_t *CkEmailW__getAlternativeContentType(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__getAttachedMessageFilename(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__getAttachmentContentID(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__getAttachmentContentType(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__getAttachmentFilename(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__getAttachmentHeader(HCkEmailW cHandle, int index, const wchar_t *fieldName);
const wchar_t *CkEmailW__getAttachmentString(HCkEmailW cHandle, int index, const wchar_t *charset);
const wchar_t *CkEmailW__getAttachmentStringCrLf(HCkEmailW cHandle, int index, const wchar_t *charset);
const wchar_t *CkEmailW__getBcc(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__getBccAddr(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__getBccName(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__getCC(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__getCcAddr(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__getCcName(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__getDeliveryStatusInfo(HCkEmailW cHandle, const wchar_t *fieldName);
const wchar_t *CkEmailW__getHeaderField(HCkEmailW cHandle, const wchar_t *fieldName);
const wchar_t *CkEmailW__getHeaderFieldName(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__getHeaderFieldValue(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__getHtmlBody(HCkEmailW cHandle);
const wchar_t *CkEmailW__getMime(HCkEmailW cHandle);
const wchar_t *CkEmailW__getPlainTextBody(HCkEmailW cHandle);
const wchar_t *CkEmailW__getRelatedContentID(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__getRelatedContentLocation(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__getRelatedContentType(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__getRelatedFilename(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__getRelatedString(HCkEmailW cHandle, int index, const wchar_t *charset);
const wchar_t *CkEmailW__getRelatedStringCrLf(HCkEmailW cHandle, int index, const wchar_t *charset);
const wchar_t *CkEmailW__getReplacePattern(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__getReplaceString(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__getReplaceString2(HCkEmailW cHandle, const wchar_t *pattern);
const wchar_t *CkEmailW__getReport(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__getTo(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__getToAddr(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__getToName(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__getXml(HCkEmailW cHandle);
const wchar_t *CkEmailW__header(HCkEmailW cHandle);
const wchar_t *CkEmailW__headerField(HCkEmailW cHandle, const wchar_t *fieldName);
const wchar_t *CkEmailW__headerFieldName(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__headerFieldValue(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__htmlBody(HCkEmailW cHandle);
const wchar_t *CkEmailW__language(HCkEmailW cHandle);
const wchar_t *CkEmailW__lastErrorHtml(HCkEmailW cHandle);
const wchar_t *CkEmailW__lastErrorText(HCkEmailW cHandle);
const wchar_t *CkEmailW__lastErrorXml(HCkEmailW cHandle);
const wchar_t *CkEmailW__localDateStr(HCkEmailW cHandle);
const wchar_t *CkEmailW__mailer(HCkEmailW cHandle);
const wchar_t *CkEmailW__mime(HCkEmailW cHandle);
const wchar_t *CkEmailW__pkcs7CryptAlg(HCkEmailW cHandle);
const wchar_t *CkEmailW__plainTextBody(HCkEmailW cHandle);
const wchar_t *CkEmailW__preferredCharset(HCkEmailW cHandle);
const wchar_t *CkEmailW__qEncodeBytes(HCkEmailW cHandle, const unsigned char *pByteData, unsigned long szByteData, const wchar_t *charset);
const wchar_t *CkEmailW__qEncodeString(HCkEmailW cHandle, const wchar_t *str, const wchar_t *charset);
const wchar_t *CkEmailW__relatedContentID(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__relatedContentLocation(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__relatedContentType(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__relatedFilename(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__relatedString(HCkEmailW cHandle, int index, const wchar_t *charset);
const wchar_t *CkEmailW__relatedStringCrLf(HCkEmailW cHandle, int index, const wchar_t *charset);
const wchar_t *CkEmailW__replacePattern(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__replaceString(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__replaceString2(HCkEmailW cHandle, const wchar_t *pattern);
const wchar_t *CkEmailW__replyTo(HCkEmailW cHandle);
const wchar_t *CkEmailW__report(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__signedBy(HCkEmailW cHandle);
const wchar_t *CkEmailW__signingHashAlg(HCkEmailW cHandle);
const wchar_t *CkEmailW__subject(HCkEmailW cHandle);
const wchar_t *CkEmailW__to(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__toAddr(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__toName(HCkEmailW cHandle, int index);
const wchar_t *CkEmailW__uidl(HCkEmailW cHandle);
const wchar_t *CkEmailW__version(HCkEmailW cHandle);
const wchar_t *CkEmailW__xml(HCkEmailW cHandle);
#endif
